{"version":3,"sources":["assets/images/59.jpg","assets/category/cat1.jpg","assets/category/cat2.jpg","assets/category/cat3.jpg","assets/category/cat4.jpg","assets/category/cat5.jpg","assets/category/cat6.jpg","components/showCase/index.tsx","utils/graphql.tsx","utils/service.tsx","config.tsx","pages/home.tsx","pages/detail/index.tsx","pages/labels/index.tsx","pages/category/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ShowCase","props","len","info","className","to","node","number","src","testImg","alt","title","updatedAt","bodyText","length","Math","floor","labels","nodes","map","item","key","id","name","milestone","username","repository","params","JSON","stringify","replace","GRAPHQL_URL","token","access_token","join","graphQLFetch","document","payload","query","ajax","url","method","headers","body","pipe","response","data","catchError","error","console","log","of","Homes","useState","posts","setPosts","setPageInfo","useEffect","subscription","graphql","queryPosts","states","first","subscribe","res","issues","edges","pageInfo","unsubscribe","Detail","useParams","detailDom","getElementById","Number","innerHTML","issue","bodyHTML","Labels","setLabels","style","color","description","cats","cat1","cat2","cat3","cat4","cat5","cat6","Category","category","setCategory","milestones","index","App","exact","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d13a08b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/59.6802a8b4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat1.562d73cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat2.ab785d06.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat3.22810b75.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat4.db4b1b50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat5.de43431f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat6.54e0d073.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport testImg from \"../../assets/images/59.jpg\";\n\nimport { Post } from '../../utils/types';\n\nimport './index.css';\n\ninterface ShowCase {\n  info: Post\n}\n\ninterface Label {\n    id: string\n    name: string\n    color: string\n    description: string\n}\n\nfunction getReadTime(len: number) {\n  return Math.floor(len / 360)\n}\n\nconst ShowCase = (props:any) => {\n  const { info } = props\n  return (\n    <div className=\"col-md-6 col-sm-12\">\n      <div className=\"show-case-bg\">\n        <div className=\"show-case\">\n          <Link to={`/post/${info.node.number}`}>\n            <img src={testImg} alt=\"\" />\n            <h3>{info.node.title}</h3>\n            <p>{info.node.title}</p>\n            <p>发布于 {info.node.updatedAt} • {getReadTime(info.node.bodyText.length)}分钟</p>\n            <div className=\"list-tags\">\n              <span>标签：</span>\n              {info.node.labels.nodes.map((item:Label)=>(\n                <span key={item.id} > {item.name} </span>\n              ))}\n              <span>类别：</span>\n              <span> {info.node.milestone.title} </span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ShowCase;","import { QueryPost } from \"./types\";\n\n\nfunction stringify(params: QueryPost) {\n  let result = JSON.stringify(params).replace(/[{}\"]/g, \"\");\n  return result;\n};\n\nexport default {\n  /**\n   * 获取文章列表\n   */\n  queryGraphQLPosts : (username: string, repository: string, params: QueryPost) => `\n    query {\n      repository(owner:\"${username}\", name: \"${repository}\") {\n        issues(${stringify(params)}) {\n          pageInfo {\n            hasNextPage\n            endCursor\n            hasPreviousPage\n            startCursor\n          }\n          totalCount\n          edges {\n            node {\n              id\n              number\n              updatedAt\n              author {\n                url\n              }\n              bodyText\n              bodyHTML\n              title\n              labels(first: 5) {\n                nodes {\n                  id\n                  name\n                  color\n                }\n              }\n              milestone {\n                id\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n\n  /**\n   * 获取标签\n   */\n  queryGraphQLLable: (username: string, repository: string) => `\n    query { \n      repository(owner:\"${username}\", name: \"${repository}\") {\n        labels(first:100) {\n          edges {\n            node {\n              id\n              name\n              color\n              description\n            }\n          }\n        }\n      }\n    }\n  `,\n\n  /**\n   * 获取分类\n   */\n  queryGraphQLCategory: (username: string, repository: string) => `\n    query { \n      repository(owner:\"${username}\", name: \"${repository}\") {\n        milestones(first:10) {\n          edges {\n            node {\n              id,\n              title,\n              description\n            }\n          }\n        }\n      }\n    }\n  `,\n\n\n  /**\n   * 获取单个文章及其评论\n   * 评论只获取最新的15个\n   */\n  queryGraphQLPostItem: (username: string, repository: string, number: number) => `\n    query { \n      repository(owner:\"${username}\", name: \"${repository}\") {\n        issue(number:${number}) {\n          id\n          createdAt\n          labels(first:5) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          milestone {\n            title\n          }\n          author {\n            login\n            url\n          }\n          title\n          body\n          bodyHTML\n          comments(last:15) {\n            edges {\n              node {\n                id\n                createdAt\n                body\n                bodyHTML\n                databaseId\n                createdAt\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n\n\n  /**\n   * 单个文章添加评论\n   * 评论规则：必须 @github账户名称 后才能提交\n   */\n  mutationGraphQLPostComment: (subjectId: string, body: string) => `\n    mutation {\n      addComment(input:{subjectId: \"${subjectId}\", body: \"${body}\"}) {\n        commentEdge {\n          node {\n            body\n            repository {\n              id\n              name\n              nameWithOwner\n            }\n            issue {\n              number\n            }\n          }\n        }\n      }\n    }\n  `,\n\n\n\n\n\n\n\n\n\n}\n","import { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\n\nimport config from '../config';\n\nimport graphql from './graphql';\n\nimport { QueryPost, MutationComment } from './types';\n\nconst { username, repository, GRAPHQL_URL, token } = config;\n\nconst access_token = token.join('');\n\nconst graphQLFetch = (document: string) => {\n  const payload = JSON.stringify({ query: document });\n  return ajax({\n    url: GRAPHQL_URL,\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${access_token}`,\n      'Content-Type': 'application/json'\n    },\n    body: payload,\n  }).pipe(\n    map(({response}) => response.data),\n    catchError(error => {\n      console.log('error: ', error);\n      return of(error);\n    })\n  );\n};\n\nconst graphQLMutationFetch = async (document: string) => {\n  const access_token = token.join('')\n  const payload = JSON.stringify({ mutation: document })\n  return ajax({\n    url: GRAPHQL_URL,\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${access_token}`,\n      'Content-Type': 'application/json'\n    },\n    body: payload,\n  }).pipe(\n    map(({response}) => response.data),\n    catchError(error => {\n      console.log('error: ', error);\n      return of(error);\n    })\n  );\n}\n\nexport const queryPosts = (params: QueryPost) => graphQLFetch(graphql.queryGraphQLPosts(username, repository, params));\n\nexport const queryLabels = () => graphQLFetch(graphql.queryGraphQLLable(username, repository));\n\nexport const queryCategory = () => graphQLFetch(graphql.queryGraphQLCategory(username, repository));\n\nexport const queryPostItem = (number: number) => graphQLFetch(graphql.queryGraphQLPostItem(username, repository, number));\n\nexport const mutationPostComment = (params: MutationComment) => graphQLMutationFetch(graphql.mutationGraphQLPostComment(params.subjectId, params.body));\n","\nexport default {\n\n  title: '网站标题',\n\n  subTitle:'副标题',\n\n  author:'hanbiao',\n\n  GRAPHQL_URL: 'https://api.github.com/graphql',\n\n  username: \"jackeybiao\",\n\n  repository: \"walleve\",\n\n  token:[\"909a710abc251013cb84b\",\"1a8255fe8198a9cff69\"],\n\n}","import React, {useState,useEffect} from 'react';\nimport ShowCase from '../components/showCase/index';\n\nimport { queryPosts } from '../utils/service';\n\nimport { Post,PageInfo } from '../utils/types';\n\nconst Homes = () => {\n\n  const [posts, setPosts] = useState([] as Array<Post>);\n  const [pageInfo,setPageInfo] = useState({} as PageInfo);\n\n  useEffect(()=>{\n    const params = {\n      states: \"OPEN\",\n      first:10\n    }\n    const subscription = queryPosts(params).subscribe(res => {\n      setPosts(res.repository.issues.edges)\n      setPageInfo(res.repository.issues.pageInfo)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  },[])\n\n  return (\n    <div className=\"dark linght container\">\n      <div className=\"row\">\n        {posts.map(item=>(\n          <ShowCase key={item.node.id} info={item} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\n\nexport default Homes;","import React, { useEffect } from 'react';\n\nimport { \n  useParams\n} from 'react-router-dom';\n\nimport { Post } from '../../utils/types';\n\nimport { queryPostItem } from '../../utils/service';\n\nimport './index.css';\n\ninterface DetailProps {\n  dispatch: Function,\n  posts:Array<Post>\n}\n\nconst Detail = (props: DetailProps) => {\n\n  const { id } = useParams();\n\n  useEffect(()=>{\n    const detailDom: HTMLElement | null = document.getElementById(\"detail\");\n\n    const subscription = queryPostItem(Number(id)).subscribe(res=>{\n\n      if(detailDom){\n        detailDom.innerHTML = res.repository.issue.bodyHTML\n      }\n\n    })\n    \n    return () => {\n      subscription.unsubscribe()\n    }\n\n  },[id])\n\n  return (\n    <div className=\"dark linght detail-container\">\n      <div id=\"detail\"></div>\n    </div>\n  ) \n}\n\nexport default Detail;\n","import React, {useState,useEffect} from 'react';\n\nimport { Label } from '../../utils/types';\n\nimport { queryLabels } from '../../utils/service';\n\nimport \"./index.css\";\n\ninterface labelsProps {}\n\nconst Labels = (props: labelsProps) => {\n\n  const [labels, setLabels] = useState([] as Array<Label>);\n\n  useEffect(()=>{\n    const subscription = queryLabels().subscribe(res => {\n      setLabels(res.repository.labels.edges)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  },[])\n\n  return (\n    <div className=\"dark linght detail-container\">\n      <div className=\"tag\">\n        {labels.map(item=>(\n          <span key={item.node.id} className=\"tag-item\" style={{color:`#${item.node.color}`}} title={item.node.description}>{item.node.name}</span>\n        ))}\n      </div>\n    </div>\n  ) \n}\n\nexport default Labels;\n","import React, {useState,useEffect} from 'react';\n\nimport { Milestone } from '../../utils/types';\n\nimport { queryCategory } from '../../utils/service';\n\nimport cat1 from '../../assets/category/cat1.jpg';\nimport cat2 from '../../assets/category/cat2.jpg';\nimport cat3 from '../../assets/category/cat3.jpg';\nimport cat4 from '../../assets/category/cat4.jpg';\nimport cat5 from '../../assets/category/cat5.jpg';\nimport cat6 from '../../assets/category/cat6.jpg';\n\n\nimport './index.css';\n\nconst cats = [cat1,cat2,cat3,cat4,cat5,cat6];\n\ninterface CategoryProps {}\n\nconst Category = (props: CategoryProps) => {\n\n  const [category, setCategory] = useState([] as Array<Milestone>);\n\n  useEffect(()=>{\n    const subscription = queryCategory().subscribe(res=>{\n      setCategory(res.repository.milestones.edges)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  },[])\n\n  return (\n    <div className=\"dark linght detail-container\">\n      <div className=\"category\">\n        {category.map((item,index)=>(\n          <div className=\"content\" key={item.node.id}>\n            <img className=\"bg\" src={cats[index+1]} alt={item.node.title} />\n            <div className=\"mate\">\n              <div className=\"info\">\n                <img className=\"avatar\" src={cats[index+1]} alt={item.node.title} />\n                <span>{item.node.title}</span>\n              </div>\n              <p>{item.node.description}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  ) \n}\n\nexport default Category;\n","import React from 'react';\n\nimport { \n    HashRouter as Router,\n    Route, Switch, Link\n  } from 'react-router-dom';\n\nimport Home from './pages/home';\nimport Detail from './pages/detail/index';\nimport Labels from './pages/labels';\nimport Category from './pages/category';\n\nimport './App.css';\n\nconst App = (props: any) => {\n  return (\n      <Router>\n        <header>\n          <nav className=\"detail-container\">\n            <ul>\n              <li>\n                <Link to=\"/\">首页</Link>\n              </li>\n              <li>\n                <Link to=\"/category\">分类</Link>\n              </li>\n              <li>\n                <Link to=\"/labels\">标签</Link>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <div className=\"dark linght\">\n          <main>\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/post/:id\" component={Detail} />\n                <Route path=\"/labels\" component={Labels} />\n                <Route path=\"/category\" component={Category} />\n            </Switch>\n          </main>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["utils/index.tsx","components/showCase/index.tsx","utils/graphql.tsx","utils/service.tsx","config.tsx","components/loading/index.tsx","pages/home.tsx","pages/detail/index.tsx","pages/category/components/postItem.tsx","pages/labels/index.tsx","pages/category/components/cateItem.tsx","pages/category/index.tsx","pages/layout/header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomColor","colorStr","Math","floor","random","toString","toUpperCase","length","format","date","moment","locale","ShowCase","props","len","info","style","backgroundImage","className","to","number","title","createdAt","bodyText","labels","nodes","map","item","key","id","name","milestone","username","repository","params","GRAPHQL_URL","token","access_token","join","graphQLFetch","document","payload","JSON","stringify","query","ajax","url","method","headers","body","pipe","response","data","catchError","error","console","log","of","queryPosts","graphql","Loading","Homes","useState","loading","setLoading","posts","setPosts","pageInfo","setPageInfo","useEffect","subscription","subscribe","res","issues","unsubscribe","hasPreviousPage","hasNextPage","onClick","before","handlePrePage","startCursor","after","handleNextPage","endCursor","Detail","useParams","article","setArticle","Number","issue","Date","dangerouslySetInnerHTML","articleHtml","__html","dangerouslyHtml","bodyHTML","PostItem","borderImage","label","Labels","isSelect","setIsSelect","selectLabel","setSelectLabel","labelPosts","setLabelPosts","setLabels","handleClick","color","description","CateItem","getnodes","totalCount","Category","milestonePosts","setMilestonePosts","category","setCategory","milestones","index","Header","App","exact","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4ab969f.chunk.js","sourcesContent":["import moment from 'moment';\r\nimport 'moment/locale/zh-cn';\r\nmoment.locale(\"ZH-cn\");\r\n\r\nexport function randomColor(){\r\n    const colorStr = Math.floor(Math.random()*0xFFFFFF).toString(16).toUpperCase();\r\n    return colorStr.length===5?`#${colorStr}0`:`#${colorStr}`;\r\n}\r\n\r\nexport function format(date = \"\") {\r\n    return moment(date).format(\"YYYY年MM月DD日\");\r\n}\r\n\r\nexport function formatWeek() {\r\n    return moment(new Date()).format(\"dddd\");\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Post } from '../../utils/types';\r\n\r\nimport { randomColor, format } from '../../utils/index';\r\n\r\nimport './index.scss';\r\n\r\ninterface ShowCase {\r\n  info: Post\r\n}\r\n\r\ninterface Label {\r\n    id: string\r\n    name: string\r\n    color: string\r\n    description: string\r\n}\r\n\r\n\r\n\r\nfunction getReadTime(len: number) {\r\n  return Math.floor(len / 360);\r\n}\r\n\r\nconst ShowCase = (props:any) => {\r\n  const { info } = props\r\n\r\n  const style = {\r\n    backgroundImage: `radial-gradient(circle at bottom left,${randomColor()},${randomColor()})`\r\n  }\r\n\r\n  return (\r\n    <div className=\"show-case-bg\">\r\n      <div className=\"show-case\">\r\n        <Link to={`/post/${info.number}`}>\r\n          <div className=\"case-shadow\" style={style}></div>\r\n          <div className=\"case-content\">\r\n              <h3>{info.title}</h3>\r\n              <p>发布于 {format(info.createdAt)} • {getReadTime(info.bodyText.length)}分钟</p>\r\n              <div className=\"list-tags\">\r\n                {info.labels.nodes.map((item:Label)=>(\r\n                  <span key={item.id} > {item.name} </span>\r\n                ))}\r\n                <span> {info.milestone.title} </span>\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowCase;","\r\nexport default {\r\n  /**\r\n   * 获取文章列表\r\n   */\r\n  queryGraphQLPosts : (username: string, repository: string, params: string) => `\r\n    query {\r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        issues(${params}) {\r\n          edges {\r\n            cursor\r\n          }\r\n          pageInfo {\r\n            hasNextPage\r\n            endCursor\r\n            hasPreviousPage\r\n            startCursor\r\n          }\r\n          totalCount\r\n          nodes {\r\n            id\r\n            number\r\n            createdAt\r\n            author {\r\n              url\r\n            }\r\n            bodyText\r\n            bodyHTML\r\n            title\r\n            labels(first: 5) {\r\n              nodes {\r\n                id\r\n                name\r\n                color\r\n              }\r\n            }\r\n            milestone {\r\n              id\r\n              title\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n  /**\r\n   * 获取标签\r\n   */\r\n  queryGraphQLLable: (username: string, repository: string) => `\r\n    query { \r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        labels(first:50) {\r\n          nodes {\r\n            id\r\n            name\r\n            color\r\n            description\r\n            issues(first: 50) {\r\n              totalCount\r\n              nodes {\r\n                number\r\n                title\r\n                createdAt\r\n                labels(first: 5) {\r\n                  nodes {\r\n                    color\r\n                    id\r\n                    name\r\n                  }\r\n                }\r\n                id\r\n                author {\r\n                  login\r\n                  url\r\n                }\r\n                milestone {\r\n                  id\r\n                  title\r\n                  number\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n  /**\r\n   * 获取分类\r\n   */\r\n  queryGraphQLCategory: (username: string, repository: string) => `\r\n    query { \r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        milestones(first: 10) {\r\n          nodes {\r\n            id\r\n            title\r\n            description\r\n            issues(first: 100) {\r\n              totalCount\r\n              nodes {\r\n                number\r\n                title\r\n                createdAt\r\n                labels(first: 5) {\r\n                  nodes {\r\n                    color\r\n                    id\r\n                    name\r\n                  }\r\n                }\r\n                id\r\n                author {\r\n                  login\r\n                  url\r\n                }\r\n                milestone {\r\n                  id\r\n                  title\r\n                  number\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n\r\n  /**\r\n   * 获取单个文章及其评论\r\n   * 评论只获取最新的15个\r\n   */\r\n  queryGraphQLPostItem: (username: string, repository: string, number: number) => `\r\n    query { \r\n      repository(owner:\"${username}\", name: \"${repository}\") {\r\n        issue(number:${number}) {\r\n          id\r\n          createdAt\r\n          labels(first:5) {\r\n            nodes {\r\n              id\r\n              name\r\n            }\r\n          }\r\n          milestone {\r\n            title\r\n          }\r\n          author {\r\n            login\r\n            url\r\n          }\r\n          title\r\n          body\r\n          bodyHTML\r\n          comments(last:15) {\r\n            nodes {\r\n              id\r\n              createdAt\r\n              body\r\n              bodyHTML\r\n              databaseId\r\n              createdAt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n\r\n  /**\r\n   * 单个文章添加评论\r\n   * 评论规则：必须 @github账户名称 后才能提交\r\n   */\r\n  mutationGraphQLPostComment: (subjectId: string, body: string) => `\r\n    mutation {\r\n      addComment(input:{subjectId: \"${subjectId}\", body: \"${body}\"}) {\r\n        commentEdge {\r\n          node {\r\n            body\r\n            repository {\r\n              id\r\n              name\r\n              nameWithOwner\r\n            }\r\n            issue {\r\n              number\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `\r\n\r\n\r\n}\r\n","import { of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { ajax } from 'rxjs/ajax';\r\n\r\nimport config from '../config';\r\n\r\nimport graphql from './graphql';\r\n\r\nimport { MutationComment } from './types';\r\n\r\nconst { username, repository, GRAPHQL_URL, token } = config;\r\n\r\nconst access_token = token.join('');\r\n\r\nconst graphQLFetch = (document: string) => {\r\n  const payload = JSON.stringify({ query: document });\r\n  return ajax({\r\n    url: GRAPHQL_URL,\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${access_token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: payload,\r\n  }).pipe(\r\n    map(({response}) => response.data),\r\n    catchError(error => {\r\n      console.log('error: ', error);\r\n      return of(error);\r\n    })\r\n  );\r\n};\r\n\r\nconst graphQLMutationFetch = async (document: string) => {\r\n  const access_token = token.join('')\r\n  const payload = JSON.stringify({ mutation: document })\r\n  return ajax({\r\n    url: GRAPHQL_URL,\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${access_token}`,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: payload,\r\n  }).pipe(\r\n    map(({response}) => response.data),\r\n    catchError(error => {\r\n      console.log('error: ', error);\r\n      return of(error);\r\n    })\r\n  );\r\n}\r\n\r\nexport const queryPosts = (params: string) => graphQLFetch(graphql.queryGraphQLPosts(username, repository, params));\r\n\r\nexport const queryLabels = () => graphQLFetch(graphql.queryGraphQLLable(username, repository));\r\n\r\nexport const queryCategory = () => graphQLFetch(graphql.queryGraphQLCategory(username, repository));\r\n\r\nexport const queryPostItem = (number: number) => graphQLFetch(graphql.queryGraphQLPostItem(username, repository, number));\r\n\r\nexport const mutationPostComment = (params: MutationComment) => graphQLMutationFetch(graphql.mutationGraphQLPostComment(params.subjectId, params.body));\r\n","\r\nexport default {\r\n\r\n  title: '网站标题',\r\n\r\n  subTitle:'副标题',\r\n\r\n  author:'hanbiao',\r\n\r\n  GRAPHQL_URL: 'https://api.github.com/graphql',\r\n\r\n  username: \"jackeybiao\",\r\n\r\n  repository: \"walleve\",\r\n\r\n  token:[\"909a710abc251013cb84b\",\"1a8255fe8198a9cff69\"],\r\n\r\n}\r\n","import React from 'react';\r\n\r\n\r\nimport './index.scss';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <div id=\"load\">\r\n        <div>欢</div>\r\n        <div>迎</div>\r\n        <div>欢</div>\r\n        <div>迎</div>\r\n        <div>欢</div>\r\n        <div>迎</div>\r\n        <div>欢</div>\r\n        <div>迎</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading;","import React, {useState,useEffect} from 'react';\r\nimport ShowCase from '../components/showCase/index';\r\n\r\nimport { queryPosts } from '../utils/service';\r\n\r\nimport { Post, PageInfo } from '../utils/types';\r\nimport Loading from '../components/loading';\r\n\r\nconst Homes = () => {\r\n  const [loading,setLoading] = useState(false)\r\n\r\n  const [posts, setPosts] = useState([] as Array<Post>);\r\n  const [pageInfo,setPageInfo] = useState({} as PageInfo);\r\n\r\n  useEffect(()=>{\r\n    const params = `\r\n      orderBy: {\r\n        field: CREATED_AT\r\n        direction: DESC\r\n      }\r\n      states: OPEN\r\n      first:10\r\n    `\r\n    setLoading(true);\r\n    const subscription = queryPosts(params).subscribe(res => {\r\n      setPosts(res.repository.issues.nodes)\r\n      setPageInfo(res.repository.issues.pageInfo)\r\n      setLoading(false)\r\n    })\r\n    return () => {\r\n      subscription.unsubscribe()\r\n      setLoading(false)\r\n    }\r\n  },[])\r\n\r\n  const handlePrePage = (before: string) => {\r\n    const params = `\r\n      orderBy: {\r\n        field: CREATED_AT\r\n        direction: DESC\r\n      }\r\n      states: OPEN\r\n      last:10\r\n      before:\"${before}\"\r\n    `\r\n    setLoading(true);\r\n    queryPosts(params).subscribe(res => {\r\n      setPosts(res.repository.issues.nodes)\r\n      setPageInfo(res.repository.issues.pageInfo)\r\n      setLoading(false)\r\n    })\r\n\r\n  }\r\n  const handleNextPage = (after: string) => {\r\n    const params = `\r\n      orderBy: {\r\n        field: CREATED_AT\r\n        direction: DESC\r\n      }\r\n      states: OPEN\r\n      first:10\r\n      after:\"${after}\"\r\n    `\r\n    setLoading(true);\r\n    queryPosts(params).subscribe(res => {\r\n      setPosts(res.repository.issues.nodes)\r\n      setPageInfo(res.repository.issues.pageInfo)\r\n      setLoading(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {loading?(<Loading />):(\r\n        <>\r\n          {posts.map(item=>(\r\n            <ShowCase key={item.id} info={item} />\r\n          ))}\r\n\r\n          {(pageInfo.hasPreviousPage || pageInfo.hasNextPage)?(\r\n            <>\r\n              <div className=\"pageInfo\">\r\n                {pageInfo.hasPreviousPage?(<div className=\"page-pre\" onClick={()=>{handlePrePage(pageInfo.startCursor)}}>上一页</div>):\"\"}\r\n                {pageInfo.hasNextPage?(<div className=\"page-next\" onClick={()=>{handleNextPage(pageInfo.endCursor)}}>下一页</div>):\"\"}\r\n              </div>\r\n            </>\r\n          ):\"\"}\r\n        </>\r\n      )}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Homes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { Post } from '../../utils/types';\r\n\r\nimport { queryPostItem } from '../../utils/service';\r\n\r\nimport { format, formatWeek  } from '../../utils/index';\r\n\r\nimport Loading from '../../components/loading';\r\n\r\nimport './index.scss';\r\n\r\ninterface DetailProps {\r\n  dispatch: Function,\r\n  posts:Array<Post>\r\n}\r\n\r\nconst Detail = (props: DetailProps) => {\r\n\r\n  const { id } = useParams();\r\n\r\n  const [article,setArticle] = useState({} as Post);\r\n\r\n  const [loading,setLoading] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    setLoading(true);\r\n    const subscription = queryPostItem(Number(id)).subscribe(res => {\r\n      setArticle(res.repository.issue);\r\n      setLoading(false);\r\n    })\r\n    \r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  },[id])\r\n\r\n  const dangerouslyHtml = (articleHtml = \"\") => ({ __html: articleHtml });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {loading?(<Loading />):(\r\n        <article>\r\n          <div className=\"article-title\">\r\n            <h3>{article.title}</h3>\r\n            <div className=\"mate\">\r\n              <span>发布于: {format(article.createdAt)}</span>\r\n              <span>当前: {formatWeek()}</span>\r\n            </div>\r\n            <hr/>\r\n          </div>\r\n          <div dangerouslySetInnerHTML={dangerouslyHtml(article.bodyHTML)}></div>\r\n        </article>\r\n      )}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { randomColor, format } from '../../../utils/index';\r\n\r\nimport { CatePost } from '../../../utils/types';\r\n\r\n\r\ninterface PostItem {\r\n  item: CatePost\r\n}\r\n\r\nexport function PostItem(props:PostItem) {\r\n  const { item } = props\r\n\r\n  const style = {\r\n    borderImage: `radial-gradient(circle at center,${randomColor()},${randomColor()}) 1`\r\n  }\r\n  return (\r\n    <div className=\"post-item\" style={style}>\r\n      <Link to={`/post/${item.number}`}>\r\n        <h3 className=\"title\">{item.title}</h3>\r\n        <div className=\"meta\">\r\n          <span>{format(item.createdAt)}</span>\r\n          {item.labels.nodes.map(label=>(\r\n            <span key={label.id}>\r\n              {label.name}\r\n            </span>\r\n          ))}\r\n          <span>{item.milestone.title}</span>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostItem;","import React, {useState,useEffect} from 'react';\r\n\r\nimport { Label,CatePost } from '../../utils/types';\r\n\r\nimport { queryLabels } from '../../utils/service';\r\n\r\nimport Loading from '../../components/loading';\r\n\r\nimport PostItem from '../category/components/postItem';\r\n\r\nimport \"./index.scss\";\r\n\r\n\r\ninterface labelsProps {}\r\n\r\nconst Labels = (props: labelsProps) => {\r\n\r\n  const [loading,setLoading] = useState(false);\r\n\r\n  const [isSelect,setIsSelect] = useState(false);\r\n\r\n  const [selectLabel,setSelectLabel] = useState({} as Label);\r\n\r\n  const [labelPosts,setLabelPosts] = useState([] as Array<CatePost>);\r\n\r\n  const [labels, setLabels] = useState([] as Array<Label>);\r\n\r\n  useEffect(()=>{\r\n    setLoading(true);\r\n    const subscription = queryLabels().subscribe(res => {\r\n      setLabels(res.repository.labels.nodes)\r\n      setLoading(false);\r\n    })\r\n    \r\n    return () => {\r\n      subscription.unsubscribe()\r\n      setLoading(false);\r\n    }\r\n  },[])\r\n\r\n\r\n  const handleClick = (item:Label) => {\r\n    if(item && item.issues && item.issues.nodes && item.issues.nodes.length > 0) {\r\n      setLabelPosts(item.issues.nodes);\r\n      setSelectLabel(item);\r\n      setIsSelect(true)\r\n    }else{\r\n      setIsSelect(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {loading?(<Loading />):(\r\n        <>\r\n          {isSelect?(\r\n            <>\r\n            <div className=\"cate-title\">标签：<span onClick={()=>{setIsSelect(false)}}>{selectLabel.name}</span></div>\r\n            {labelPosts.map((item) =>(\r\n              <PostItem key={item.id} item={item} />\r\n            ))}\r\n            </>\r\n          ):(\r\n            <>\r\n              <div className=\"tag\">\r\n                {labels.map(item=>(\r\n                  <span onClick={()=>{handleClick(item)}} key={item.id} className=\"tag-item\" style={{color:`#${item.color}`}} title={item.description}>{item.name}</span>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Labels;\r\n","import React from 'react';\r\nimport { Milestone } from '../../../utils/types';\r\n\r\nimport \"./index.scss\";\r\n\r\nimport { randomColor } from '../../../utils';\r\n\r\ninterface ShowItemProps {\r\n  item: Milestone,\r\n  index: number,\r\n  getnodes: Function,\r\n}\r\n\r\nconst CateItem = (props: ShowItemProps) => {\r\n\r\n  const { item, getnodes } = props;\r\n\r\n  const handleClick = (item: Milestone) => {\r\n    if(item && item.issues && item.issues.nodes && item.issues.nodes.length > 0) {\r\n      getnodes(item.issues.nodes);\r\n    }else {\r\n      return getnodes([]);\r\n    }\r\n  }\r\n\r\n  const style = {\r\n    backgroundImage: `linear-gradient(to bottom right,${randomColor()} 30%, ${randomColor()})`\r\n  }\r\n\r\n  return (\r\n    <div onClick={()=>{handleClick(item)}} className=\"cate-item\">\r\n      <div className=\"bg\" style={style}></div>\r\n      <div className=\"mate\">\r\n        <div className=\"info\">\r\n          <span>{item.title} &#40; {item.issues?.totalCount} &#41;</span> <span>{item.description}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default CateItem;","import React, {useState,useEffect} from 'react';\r\n\r\nimport { Milestone, CatePost } from '../../utils/types';\r\n\r\nimport { queryCategory } from '../../utils/service';\r\n\r\n\r\nimport Loading from '../../components/loading';\r\nimport CateItem from './components/cateItem';\r\nimport PostItem from './components/postItem';\r\n\r\nimport './index.scss';\r\n\r\ninterface CategoryProps {}\r\n\r\nconst Category = (props: CategoryProps) => {\r\n\r\n  const [milestonePosts,setMilestonePosts] = useState([] as Array<CatePost>);\r\n\r\n  const [isSelect,setIsSelect] = useState(false);\r\n\r\n  const [loading,setLoading] = useState(false);\r\n\r\n  const [category, setCategory] = useState([] as Array<Milestone>);\r\n\r\n  useEffect(()=>{\r\n    setLoading(true)\r\n    const subscription = queryCategory().subscribe(res=>{\r\n      setCategory(res.repository.milestones.nodes)\r\n      setLoading(false)\r\n    })\r\n    return () => {\r\n      subscription.unsubscribe()\r\n      setLoading(false)\r\n    }\r\n  },[])\r\n\r\n  const handleClick = (nodes:Array<CatePost>) => {\r\n    if(nodes.length > 0) {\r\n      setMilestonePosts(nodes);\r\n      setIsSelect(true)\r\n    }else{\r\n      setIsSelect(false)\r\n    } \r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {loading?(<Loading />):(\r\n        <>\r\n            {isSelect?(\r\n              <>\r\n                <div className=\"cate-title\">分类：<span onClick={()=>{setIsSelect(false)}}>{milestonePosts[0].milestone.title}</span></div>\r\n                {milestonePosts.map((item) =>(\r\n                  <PostItem key={item.id} item={item} />\r\n                ))}\r\n              </>\r\n            ):(\r\n              <>\r\n                {category.map((item,index)=>(\r\n                  <CateItem key={item.id} index={index} item={item} getnodes={(nodes:Array<CatePost>)=>{handleClick(nodes)}} />\r\n                ))}\r\n              </>\r\n            )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default Category;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"./index.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">首页</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/category\">分类</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/labels\">标签</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React,{useEffect} from 'react';\r\n\r\nimport { \r\n    HashRouter as Router,\r\n    Route, Switch,\r\n  } from 'react-router-dom';\r\n\r\nimport Home from './pages/home';\r\nimport Detail from './pages/detail/index';\r\nimport Labels from './pages/labels';\r\nimport Category from './pages/category';\r\n\r\nimport Header from './pages/layout/header';\r\n\r\nconst App = () => {\r\n  useEffect(()=> {\r\n    const oi = \"color:#FFF;line-height:22px;background:#D68FE9;padding:0 15px;margin-right:15px\";\r\n    const ois = \"color:#000;line-height:22px;\";\r\n    console.log(\"%c寒露%cwww.jackeybiao.com\", oi,ois);\r\n  },[])\r\n\r\n  return (\r\n      <Router>\r\n        <Header />\r\n        <main>\r\n          <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route path=\"/post/:id\" component={Detail} />\r\n              <Route path=\"/labels\" component={Labels} />\r\n              <Route path=\"/category\" component={Category} />\r\n          </Switch>\r\n        </main>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}